upstream oauth2-proxy { server oauth2-proxy:4180; }
upstream kong_gui    { server kong-oath2:8002; }
upstream kong_admin  { server kong-oath2:8001; }

server {
  listen 80;

  # keep redirects relative if possible (prevents http://localhost/admin)
  absolute_redirect off;

  # Bigger buffers for oauth2-proxy's Set-Cookie and headers
  proxy_buffering on;
  proxy_buffer_size 256k;
  proxy_buffers 16 256k;
  proxy_busy_buffers_size 512k;
  proxy_temp_file_write_size 512k;

  # Helpful timeouts
  proxy_read_timeout 90s;
  proxy_connect_timeout 15s;

  # build a Host header that includes the port when non-80
  set $forwarded_host $host;
  if ($server_port != 80) { set $forwarded_host "$host:$server_port"; }

  # forward the real host/port to upstreams
  proxy_set_header Host $forwarded_host;
  proxy_set_header X-Forwarded-Host $forwarded_host;
  proxy_set_header X-Forwarded-Port $server_port;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

  location = /healthz { return 200 "ok\n"; }

  # --- oauth2-proxy endpoints (service name "oauth2-proxy") ---
  location /oauth2/ {
    proxy_pass http://oauth2-proxy; # <- Docker service name
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  # auth_request endpoint
  location = /oauth2/auth {
  proxy_pass http://oauth2-proxy;
  proxy_set_header Host $host;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme;
  internal;
  }

  # if auth_request returns 401, send the user to oauth2 start
  # IMPORTANT: include rd=$scheme://$http_host$request_uri
  error_page 401 = @oauth2_signin;
  location @oauth2_signin {
  return 302 /oauth2/start?rd=$scheme://$http_host$request_uri;
  }

   # ---- Protected app (your Admin GUI) ----
   location /admin/ {
   # Call oauth2-proxy to check session
   auth_request /oauth2/auth;

   # (optional) capture identity headers set by oauth2-proxy
     auth_request_set $user $upstream_http_x_auth_request_user;
     auth_request_set $email $upstream_http_x_auth_request_email;

     # Forward to your Admin GUI upstream
     proxy_pass http://kong_gui; # define this upstream elsewhere
     proxy_set_header Host $host;
     proxy_set_header X-User $user;
     proxy_set_header X-Email $email;
     proxy_set_header X-Forwarded-Proto $scheme;
   }


  location /admin-api/ {
    auth_request /oauth2/auth;
    error_page 401 = /oauth2/start;

    rewrite ^/admin-api/(.*)$ /$1 break;
    proxy_pass http://kong_admin/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Methods "GET,POST,PUT,PATCH,DELETE,OPTIONS" always;
      add_header Access-Control-Allow-Headers "Authorization,Content-Type" always;
      add_header Access-Control-Allow-Credentials "true" always;
      return 204;
    }
    add_header Access-Control-Allow-Origin $http_origin always;
    add_header Access-Control-Allow-Credentials "true" always;
  }
}