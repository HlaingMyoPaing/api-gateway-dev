upstream oauth2      { server oauth2-proxy:8080; }
upstream gui_upstream { server kong:8002; }   # Admin GUI (e.g., Kong Manager/Konga/your SPA)
upstream admin_api    { server kong:8001; }   # Kong Admin API (internal)

server {
  listen 80;
  server_name _;

  # Health
  location = /healthz { return 200 "ok\n"; }

  # Normalize /admin -> /admin/
  location = /admin { return 301 /admin/; }

  # ===== Protected GUI =====
  location /admin/ {
    # AuthN via oauth2-proxy
    auth_request /oauth2/auth;
    error_page 401 = /oauth2/sign_in;

    # pass identity headers from oauth2-proxy to upstream
    auth_request_set $user   $upstream_http_x_auth_request_user;
    auth_request_set $email  $upstream_http_x_auth_request_email;
    auth_request_set $groups $upstream_http_x_auth_request_groups;
    proxy_set_header X-User  $user;
    proxy_set_header X-Email $email;
    proxy_set_header X-Groups $groups;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    proxy_pass http://gui_upstream;
    proxy_redirect off;

    # SPA fallback (optional)
    proxy_intercept_errors on;
    error_page 404 = @spa;
  }

  location @spa { proxy_pass http://gui_upstream; }

  # Static assets (cache)
  location ~* ^/admin/.*\.(?:js|mjs|css|map|png|jpg|jpeg|gif|svg|ico|woff2?|ttf)$ {
    proxy_pass http://gui_upstream;
    expires 7d;
    add_header Cache-Control "public, max-age=604800";
  }

  # ===== Protected Admin API as same-origin =====
  location /admin-api/ {
    # Preflight for browsers
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin $http_origin always;
      add_header Access-Control-Allow-Credentials true always;
      add_header Access-Control-Allow-Headers "Accept, Authorization, Content-Type, Kong-Admin-Token" always;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
      return 204;
    }

    # Require login
    auth_request /oauth2/auth;
    error_page 401 = /oauth2/sign_in;

    # Strip prefix and forward
    rewrite ^/admin-api/?(.*)$ /$1 break;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Forward user identity headers downstream if needed
    auth_request_set $user   $upstream_http_x_auth_request_user;
    auth_request_set $email  $upstream_http_x_auth_request_email;
    proxy_set_header X-User  $user;
    proxy_set_header X-Email $email;

    proxy_pass http://admin_api;
    proxy_redirect off;

    # CORS (same-origin typically makes this unnecessary, but safe)
    add_header Access-Control-Allow-Origin $http_origin always;
    add_header Access-Control-Allow-Credentials true always;
  }

  # ===== oauth2-proxy endpoints =====
  location /oauth2/ {
    proxy_pass http://oauth2;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  location = /oauth2/auth {
    proxy_pass http://oauth2;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    internal;
  }
}
